# docker-compose.yml
# Define e orquestra toda a pilha de serviços com um único ficheiro.
# > docker-compose up --build --scale producer=2

version: '3.8'

networks:
  app-net:
    driver: bridge

volumes:
  postgres-data:
    driver: local

services:
  # --- SERVIÇOS DA APLICAÇÃO ---

  db-init:
    build:
      context: .
      target: app-python
    container_name: db_init
    networks: [app-net]
    environment: { DB_HOST: postgres }
    command: >
      sh -c "python db/create_db.py && python db/carga_inicial.py"

  producer:
    build:
      context: .
      target: app-python
    networks: [app-net]
    container_name: producer
    depends_on:
      db-init: { condition: service_completed_successfully }
    environment:
      DB_HOST: postgres
      KAFKA_HOST: kafka:9092
      NUM_WORKERS: 4
    command: ["python", "producer.py"]
    restart: on-failure

  persist-sim-consumer:
    build:
      context: .
      target: app-python
    networks: [app-net]
    container_name: persist_sim_consumer
    depends_on:
      db-init: { condition: service_completed_successfully }
      producer: { condition: service_started }
    environment:
      DB_HOST: postgres
      KAFKA_HOST: kafka:9092
    command: ["python", "persist_sim_consumer.py"]

  dashboard:
    build:
      context: .
      target: app-python
    container_name: dashboard
    networks: [app-net]
    ports: ["8501:8501"]
    environment:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: ecommerce_db
    command: ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"]
