# docker-compose.yaml ATUALIZADO

version: '3.8'

networks:
  kafka-net:
    driver: bridge

services:
  # Serviço 1: Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - kafka-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Serviço 2: Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  # Serviço 3: Kafdrop
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    hostname: kafdrop
    container_name: kafdrop
    networks:
      - kafka-net
    ports:
      - "9000:9000"
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      
  # --- NOSSO NOVO SERVIÇO ABAIXO ---

  # Serviço 4: Banco de Dados PostgreSQL
  postgres_db:
    image: postgres:14-alpine  # Usando uma imagem oficial e leve do Postgres
    hostname: postgres_db
    container_name: postgres_db
    networks:
      - kafka-net
    ports:
      - "5432:5432" # Mapeia a porta do seu PC para a porta do contêiner
    environment:
      # Essas variáveis DEVEM corresponder ao seu script create_db.py
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
    volumes:
      - postgres-data:/var/lib/postgresql/data # Garante que os dados não sejam perdidos

# Define o volume para persistência dos dados do PostgreSQL
volumes:
  postgres-data: